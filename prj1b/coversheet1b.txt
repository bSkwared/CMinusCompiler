CS 3510 - Compiler
Project 1....b
Timothy Smith and Blake Lasky


Requirements:
  Develop a Scanner using JFlex, which can tokenize a program written in the C- 
  language described in Appendix A of the text.
  
Design & Implementation:
  We needed to create a .flex file that provides the rules for the language. We
  took the regexes we created in Project #1 and converted them into the lexical rules
  that JFlex uses. Instead of using a normal regex for comments, we defined a new set
  of conditions inside a COMMENT state to handle unclosed comments easily.
  
  We wrote some code that is copied into the generated source file. It includes the 
  main function and view/getToken functions we used in Project #1. We replaced 
  references to our CMinusScanner with a CMinusLex class (to use the new lexical 
  rules generated by the CMinus.flex file). We also added a CMinusLex class
  constructor that took a filename (so as to make sure it called our new constructor
  and not the default one that takes a java.io.Reader).

Testing:
  Our new JFlex Scanner works with the same functionality as our original CMinus 
  Scanner developed in Project #1. This time we actually made sure to check for
  all the different kinds of errors. We had three test cases that contained every
  legal token in different forms. We then had a test file for every type of error
  possible. Because our scanner stops at an error, we made a separate for all errors
  and created a separate class to test them all quickly (we added some more since 
  we didn't have enough for Project #1). This class also compared the results of 
  our JFlex Scanner to the Project #1 Scanner. All twenty-three of our test files 
  returned the right result and compared successfully to the old Scanner.

Summary and Conclusion:
  It worked, and hopefully Timothy will remember to print out all of the code this
  time. It was really cool to see how easy JFlex is to use.
